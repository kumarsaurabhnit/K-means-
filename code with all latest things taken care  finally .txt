#!/usr/bin/python3

import random
import math
# 1-D data
X=[3,4,6,8,10,12,14,16,18,20,22,24,26,41,49,50,70,11,54,89,110]

#2-D data
'''X=[[3,0],[4,0],[6,0],[8,0],[10,0],[12,0],[14,0],[16,0],[18,0],[20,0],[22,0],[24,0],[26,0],[41,0],[49,0],[50,0],[70,0],[11,0],[54,0],[90,0],[89,0],[110,0]]'''

# 3-D data
'''X=[[100,5,2], [90,5,51], [110,5,69], [97,4,1], [102,4,20], [112,4,300], [92,4,44], [95,3,200], [90,3,86], [100,2,90],
     [110,5,180], [100,5,0], [110,4,156], [93,3,143], [107,2,-25], [117,3,50], [96,2,500], [105,3,700], [100,3,882], [110,3,22],[3,0,0],[4,0,0],[6,0,0],[8,0,0],[10,0,0],[12,0,0],[14,0,0],[16,0,0],[18,0,0],[20,0,0],[22,0,0],[24,0,0],[26,0,0],[41,0,0],[49,0,0],[50,0,0],[70,0,0],[11,0,0],[54,0,0],[90,0,0],[89,0,0],[110,0,0],[55,55,55],[0,4,4],[33,33,33]]'''


#other data sets

'''X = [[10,5], [90,5], [11,5], [97,4], [12,4], [12,4], [92,4], [95,3], [90,3], [10,31],
     [11,5], [10,5], [11,4], [93,3], [17,2], [17,3], [96,2], [15,3], [10,3], [11,3],
     [60,2], [70,2],[40,1], [70,3], [50,1], [20,0],[50,0],[60,3],[60,1],[55,0],
     [40,2], [45,2],[40,0], [55,3], [60,1], [65,0],[70,0],[51,2],[51,1],[48,0],[1,1],[5,5],[20,20],[3,0],[4,0],[6,0],[8,0],[10,0],[12,0],[14,0],[16,0],[18,0],[20,0],[22,0],[24,0],[26,0],[41,0],[49,0],[50,0],[70,0],[11,0],[54,0],[90,0],[89,0],[11,2],[90,90],[55,55],[25,40],[5,35],[12,13],[67,10],[33,56],[34,20],[77,90],[13,55],[77,80],[40,30],[99,15],[10,10]]'''
     
'''X=[[3,0,0],[4,0,0],[6,0,0],[8,0,0],[10,0,0],[12,0,0],[14,0,0],[16,0,0],[18,0,0],[20,0,0],[22,0,0],[24,0,0],[26,0,0],[41,0,0],[49,0,0],[50,0,0],[70,0,0],[11,0,0],[54,0,0],[90,0,0],[89,0,0],[110,0,0]]'''


k=2
dims=1

euclidian_distlist=[]

def random_centers(dims,k):
    centerss = []
    for i in range(k):
        center = []
        for d in range(dims):
            rand = random.randint(-100,100)
            center.append(rand)
            
        centerss.append(center)
    '''print(centerss)'''
    return centerss
    
centers=random_centers(dims,k)
print(centers)

'''centers=[[7, 55],[73 ,25],[90,32]]'''
'''def add(k):
    l=[]
    for i in range(0,k):
        l.append([]);
    
    return l;
    
result=add(3)
print(result)'''

def point_clustering(data,centers,dims,k):
    '''print(centers)'''
    
    result = [[] for i in range(k)]
    '''print(result)'''


    for point in data:
        
        for i in range(0,len(centers)):
            euclidean_dist = 0
            
            for d in range(0,dims):
                if dims >1 :
                    
                    dist = (point[d] - centers[i][d])
                    '''print(dist)'''
                    euclidean_dist += ((dist)**2)
                else:
                    dist=(point - centers[i][d])
                    euclidean_dist += ((dist)**2)
                
                
            euclidean_dist = math.sqrt(euclidean_dist)
            '''print(euclidean_dist)'''
            
            euclidian_distlist.append(euclidean_dist)
        '''print(x)'''
            
        y=min(euclidian_distlist)
        z=euclidian_distlist.index(y)
        '''print(z)'''
        '''print(point)'''
        euclidian_distlist.clear()
        
        
        result[z].append(point)
        '''print(cluster[z])'''
        
    print(result)
    '''print(len(result))'''

    centers1=[]
    for iresult in result:
        individual_result=iresult
        '''print(individual_result)'''
        if dims ==3:
            x_coords = [p[0] for p in individual_result]
            y_coords = [p[1] for p in individual_result]
            z_coords=  [p[2] for p in individual_result]
            _len = len(individual_result)
            if _len ==0:
                print("bad initialisation ! define centroid again ")
                centers=random_centers(dims,k)
                '''print(centers)'''
                return point_clustering(data,centers,dims,k)
            else:
                
                centroid_x = sum(x_coords)/_len
                centroid_y = sum(y_coords)/_len
                centroid_z = sum(z_coords)/_len
                centers1.append([centroid_x,centroid_y,centroid_z])
        
        elif dims ==2:
            x_coords = [p[0] for p in individual_result]
            y_coords = [p[1] for p in individual_result]
        
            _len = len(individual_result)
            if _len ==0:
                print("bad initialisation ! define centroid again ")
                centers=random_centers(dims,k)
                '''print(centers)'''
                return point_clustering(data,centers,dims,k)
            else:
                
                centroid_x = sum(x_coords)/_len
                centroid_y = sum(y_coords)/_len
            
                centers1.append([centroid_x,centroid_y])
            
        elif dims==1:
            x_coords = [p for p in individual_result]
            '''print(x_coords)'''
        
            _len = len(individual_result)
            if _len ==0:
                print("bad initialisation ! define centroid again ")
                centers=random_centers(dims,k)
                '''print(centers)'''
                return point_clustering(data,centers,dims,k)
            else:
            
                centroid_x = sum(x_coords)/_len
            
                centers1.append([centroid_x])
    print(centers1)
    if centers1==centers:
        print("Job Done ! final clusters ")
        
    else:
        print("oh ! no match ! one more iteration ")
        '''result.clear()'''
        centers=centers1
        print(centers)
        '''print(result)'''
        result.clear()
        '''print(result)'''
        return point_clustering(X,centers,dims,k)
    

point_clustering(X,centers,dims,k)
